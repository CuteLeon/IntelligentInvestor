// <auto-generated />
using System;
using IntelligentInvestor.Infrastructure.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntelligentInvestor.Infrastructure.Migrations
{
    [DbContext(typeof(IntelligentInvestorDBContext))]
    [Migration("20220113081218_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("IntelligentInvestor.Domain.Companys.Company", b =>
                {
                    b.Property<int>("StockMarket")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StockCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Industry")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rank")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<int>("Vote")
                        .HasColumnType("INTEGER");

                    b.HasKey("StockMarket", "StockCode");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("IntelligentInvestor.Domain.Options.GenericOption", b =>
                {
                    b.Property<string>("OptionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerLevel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionValue")
                        .HasColumnType("TEXT");

                    b.HasKey("OptionName", "OwnerLevel", "Category");

                    b.ToTable("GenericOptions");
                });

            modelBuilder.Entity("IntelligentInvestor.Domain.Quotas.Quota", b =>
                {
                    b.Property<int>("StockMarket")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StockCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("QuotaTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ClosingPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ClosingPriceYesterday")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FluctuatingRange")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FluctuatingRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HighestPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LowestPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OpenningPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("StockMarket", "StockCode", "Frequency", "QuotaTime");

                    b.ToTable("Quotas");
                });

            modelBuilder.Entity("IntelligentInvestor.Domain.Stocks.Stock", b =>
                {
                    b.Property<int>("StockMarket")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StockCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StockMarket", "StockCode");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("IntelligentInvestor.Domain.Trades.TradeStrand", b =>
                {
                    b.Property<int>("StockMarket")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StockCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("QuotaTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AuctionPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BiddingPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BuyPrice1")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BuyPrice2")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BuyPrice3")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BuyPrice4")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BuyPrice5")
                        .HasColumnType("TEXT");

                    b.Property<long>("BuyStrand1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BuyStrand2")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BuyStrand3")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BuyStrand4")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BuyStrand5")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SellPrice1")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SellPrice2")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SellPrice3")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SellPrice4")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SellPrice5")
                        .HasColumnType("TEXT");

                    b.Property<long>("SellStrand1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SellStrand2")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SellStrand3")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SellStrand4")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SellStrand5")
                        .HasColumnType("INTEGER");

                    b.HasKey("StockMarket", "StockCode", "QuotaTime");

                    b.ToTable("TradeStrands");
                });

            modelBuilder.Entity("IntelligentInvestor.Domain.Companys.Company", b =>
                {
                    b.HasOne("IntelligentInvestor.Domain.Stocks.Stock", "Stock")
                        .WithOne("Company")
                        .HasForeignKey("IntelligentInvestor.Domain.Companys.Company", "StockMarket", "StockCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("IntelligentInvestor.Domain.Quotas.Quota", b =>
                {
                    b.HasOne("IntelligentInvestor.Domain.Stocks.Stock", "Stock")
                        .WithMany("Quotas")
                        .HasForeignKey("StockMarket", "StockCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("IntelligentInvestor.Domain.Trades.TradeStrand", b =>
                {
                    b.HasOne("IntelligentInvestor.Domain.Stocks.Stock", "Stock")
                        .WithMany("TradeStrands")
                        .HasForeignKey("StockMarket", "StockCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("IntelligentInvestor.Domain.Stocks.Stock", b =>
                {
                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Quotas");

                    b.Navigation("TradeStrands");
                });
#pragma warning restore 612, 618
        }
    }
}
